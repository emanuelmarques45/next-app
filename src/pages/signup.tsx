import Head from "next/head"
import { useForm } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"
import { useAuth } from "@/contexts/AuthContext"
import { useState } from "react"
import { SignUpSchemaType, signUpSchema } from "@/lib/utils/schemas/signUp"

export default function SignUp() {
  const auth = useAuth()
  const [serverError, setServerError] = useState(null)

  async function onSubmit({ username, email, password }: SignUpData) {
    try {
      await auth.signUp({ username, email, password })
    } catch (error: any) {
      setServerError(error.response.data.message)
    }
  }

  const {
    register,
    handleSubmit,
    formState: { errors }
  } = useForm<SignUpSchemaType>({
    resolver: zodResolver(signUpSchema)
  })

  return (
    <>
      <Head>
        <title>Login Page</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <form onSubmit={handleSubmit(data => onSubmit(data))}>
        <input {...register("username")} type="text" placeholder="Username" />
        {errors.username?.message && <p>{errors.username?.message}</p>}

        <input {...register("email")} type="text" placeholder="Email" />
        {errors.email?.message && <p>{errors.email?.message}</p>}

        <input {...register("password")} type="text" placeholder="Password" />
        {errors.password?.message && <p>{errors.password?.message}</p>}

        {serverError && <p>{serverError}</p>}
        <button>Sign Up</button>
      </form>
    </>
  )
}
